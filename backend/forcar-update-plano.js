// Script para for√ßar atualiza√ß√£o do plano FREE
import { exec } from 'child_process';

async function forcarUpdatePlano() {
  try {
    console.log('üîÑ For√ßando atualiza√ß√£o do plano FREE...');
    
    // Comando mais espec√≠fico para o Railway
    const sqlCommand = `railway connect backend -- psql -c "UPDATE planos SET \\"limiteAgendamentos\\" = 110, \\"limiteAgendamentosDia\\" = 5, \\"permitePortfolio\\" = false, \\"permiteRelatorios\\" = false, \\"permiteDestaque\\" = false, \\"diasDestaque\\" = 0 WHERE nome = 'FREE';"`;
    
    console.log('üìù Executando SQL de atualiza√ß√£o...');
    
    exec(sqlCommand, (error, stdout, stderr) => {
      if (error) {
        console.log('‚ùå Erro ao executar SQL:', error.message);
        console.log('\nüîß SOLU√á√ÉO MANUAL:');
        console.log('1. Acesse: https://railway.app');
        console.log('2. V√° para o projeto JFAgende');
        console.log('3. Clique no servi√ßo backend');
        console.log('4. V√° para a aba "Database"');
        console.log('5. Execute este SQL:');
        console.log(`
UPDATE planos 
SET 
  "limiteAgendamentos" = 110,
  "limiteAgendamentosDia" = 5,
  "permitePortfolio" = false,
  "permiteRelatorios" = false,
  "permiteDestaque" = false,
  "diasDestaque" = 0
WHERE nome = 'FREE';
        `);
        return;
      }
      
      console.log('‚úÖ SQL executado!');
      console.log('üìä Resultado:', stdout);
      
      if (stderr) {
        console.log('‚ö†Ô∏è  Avisos:', stderr);
      }
      
      // Aguardar um pouco e verificar
      console.log('\n‚è≥ Aguardando processamento...');
      setTimeout(async () => {
        try {
          const response = await fetch('https://jfagende-production.up.railway.app/api/planos/comparar');
          const planos = await response.json();
          const planoFree = planos.find(p => p.nome === 'FREE');
          
          if (planoFree) {
            console.log('\nüìä Estado atual do plano FREE:');
            console.log(`   Agendamentos/dia: ${planoFree.recursos.agendamentosDia}`);
            console.log(`   Agendamentos/m√™s: ${planoFree.recursos.agendamentosMes}`);
            console.log(`   Portf√≥lio: ${planoFree.recursos.portfolio ? '‚úÖ' : '‚ùå'}`);
            console.log(`   Relat√≥rios: ${planoFree.recursos.relatorios ? '‚úÖ' : '‚ùå'}`);
            console.log(`   Destaque: ${planoFree.recursos.destaque ? '‚úÖ' : '‚ùå'}`);
            
            const correto = 
              planoFree.recursos.agendamentosDia === 5 &&
              planoFree.recursos.agendamentosMes === 110 &&
              !planoFree.recursos.portfolio &&
              !planoFree.recursos.relatorios &&
              !planoFree.recursos.destaque;
            
            if (correto) {
              console.log('\nüéâ SUCESSO! Plano FREE atualizado corretamente!');
              console.log('‚úÖ Todas as especifica√ß√µes foram aplicadas');
            } else {
              console.log('\n‚ö†Ô∏è  Plano FREE ainda n√£o foi atualizado corretamente');
              console.log('üîß Execute o SQL manualmente no Railway Dashboard');
            }
          }
        } catch (error) {
          console.log('‚ùå Erro ao verificar atualiza√ß√£o:', error.message);
        }
      }, 3000);
    });
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

// Executar atualiza√ß√£o
forcarUpdatePlano();
